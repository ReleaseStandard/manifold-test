/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use JCenter for resolving dependencies.
//    jcenter()
	mavenCentral()
	google()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'systems.manifold:manifold-json-rt:2021.1.14'
    implementation 'systems.manifold:manifold-props-rt:2021.1.14'
    implementation 'systems.manifold:manifold-ext:2021.1.14'
    implementation 'systems.manifold:manifold-rt:2021.1.14'
    annotationProcessor 'systems.manifold:manifold-json:2021.1.14'
    annotationProcessor 'systems.manifold:manifold-props:2021.1.14'
    annotationProcessor 'systems.manifold:manifold-ext:2021.1.14'

}

application {
    // Define the main class for the application.
    mainClass = 'MANIFOLD.MINIMAL.App'
}
if (JavaVersion.current() != JavaVersion.VERSION_1_8 &&
        sourceSets.main.allJava.files.any { it.name == "module-info.java" }) {
    tasks.withType(JavaCompile) {
        // if you DO define a module-info.java file:
        options.compilerArgs += ['-Xplugin:Manifold', '--module-path', it.classpath.asPath]
    }
} else {
    tasks.withType(JavaCompile) {
        // If you DO NOT define a module-info.java file:
        options.compilerArgs += ['-Xplugin:Manifold']
    }
}
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-verbose', '-g']

}
